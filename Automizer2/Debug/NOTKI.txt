	
	//----------------------------------------TEST KONWERSJI RAK
	/*
	cout << "Reka: AhQc"
	<< "Kod+10: "
	<< alg_funkcje->handToNum("AhQc")
	<< " OWROTNIE: "
	<<alg_funkcje->NumToHand(2448)<<endl;
	*/


	cout << "TEST KONWERTEROW:" << endl;

	vector<int> test = alg_funkcje->matrix2cards(player);
	for (std::vector<int>::size_type i = 0; i != test.size(); i++) {
		cout << test[i] << " - " << alg_funkcje->NumToString(test[i])<<endl;

	}


	vector<int> c = whatHand(player);
	for (std::vector<int>::size_type i = 0; i != c.size(); i++) {
		if (i == 0) std::cout << ranka(c[i]) << endl; else
			std::cout << fig(c[i]) << "  ";

	}


	/*for (std::vector<int>::size_type j = 0; j != board.size(); j++) {
		cout << board[j] << " - ";
	}
	cout << endl;*/

	/*for (std::vector<int>::size_type j = 0; j != cards.size(); j++) {
		cout << cards[j] << " - ";
	}
	cout << endl;*/


	//--------------------------------------------------------LOSOWANIE WEKTOR
	int count = 0;
	for (int a = 0; a < 50 && count <7; a++){
		
		i1 = rand() % 13;
		j1 = rand() % 4;
		if (player[i1][j1] != true){

			player[i1][j1] = true;
			count++;
		}
	

	}

	for (int i = 0; i < 13; i++){
		for (int j = 0; j < 4; j++){
			if (player[i][j] != true){

				player[i][j] = false;
			}
		}
	}





cout << "Player1: ";
	for (int j = 0; j != player1.size(); j++) {
		cout << player1[j] << " - ";
	}
	cout << endl;

	cout << "Player2: ";
	for (int j = 0; j != player2.size(); j++) {
		cout << player2[j] << " - ";
	}
	cout << endl;
	cout << "Player3: ";
	for (int j = 0; j != player3.size(); j++) {
		cout << player3[j] << " - ";
	}
	cout << endl;
	cout << "Player4: ";
	for (int j = 0; j != player4.size(); j++) {
		cout << player4[j] << " - ";
	}
	cout << endl;
	cout << "Player5: ";
	for (int j = 0; j != player5.size(); j++) {
		cout << player5[j] << " - ";
	}
	cout << endl;
	cout << "Player6: ";
	for (int j = 0; j != player6.size(); j++) {
		cout << player6[j] << " - ";
	}


































	int hand1[7];
	int hand2[7];
	int hand3[7];
	int hand4[7];
	int hand5[7];
	int hand6[7];

	for (int i = 0; i < 7; i++) {
		hand1[i] = player1[i];
		hand2[i] = player2[i];
		hand3[i] = player3[i];

		hand4[i] = player4[i];
		hand5[i] = player5[i];
		hand6[i] = player6[i];

	}

	vector<int> whathand1 = whatHand(hand1);
	vector<int> whathand2 = whatHand(hand2);
	vector<int> whathand3 = whatHand(hand3);
	vector<int> whathand4 = whatHand(hand4);
	vector<int> whathand5 = whatHand(hand5);
	vector<int> whathand6 = whatHand(hand6);
	cout << endl;
	cout << "Player1: "  ;
	for (std::vector<int>::size_type i = 0; i != whathand1.size(); i++) {
		if (i == 0) cout << ranka(whathand1[i]) << " ";
		if (i>0) cout << fig(whathand1[i]) << " ";
	}
	cout << endl;

	cout << "Player2: ";
	for (std::vector<int>::size_type i = 0; i != whathand2.size(); i++) {
		if (i == 0) cout << ranka(whathand2[i]) << " ";
		if (i>0) cout << fig(whathand2[i]) << " ";
	}
	cout << endl;

	cout << "Player3: ";
	for (std::vector<int>::size_type i = 0; i != whathand3.size(); i++) {
		if (i == 0) cout << ranka(whathand3[i]) << " ";
		if (i>0) cout << fig(whathand3[i]) << " ";
	}
	cout << endl;

	cout << "Player4: ";
	for (std::vector<int>::size_type i = 0; i != whathand4.size(); i++) {
		if (i == 0) cout << ranka(whathand4[i]) << " ";
		if (i>0) cout << fig(whathand4[i]) << " ";
	}
	cout << endl;

	cout << "Player5: ";
	for (std::vector<int>::size_type i = 0; i != whathand5.size(); i++) {
		if (i == 0) cout << ranka(whathand5[i]) << " ";
		if (i>0) cout << fig(whathand5[i]) << " ";
	}
	cout << endl;

	cout << "Player6: ";
	for (std::vector<int>::size_type i = 0; i != whathand6.size(); i++) {
		
		if (i==0) cout << ranka(whathand6[i]) << " ";
		if (i>0) cout << fig(whathand6[i]) << " ";
	}
	cout << endl;




	int ww = whoWins(
		whathand1,
		whathand2,
		whathand3,
		whathand4,
		whathand5,
		whathand6
		);

	cout << "Wygral gracz: " << ww << endl;



		a	0x006e02c0 {...}	algo_funkcje *
		i	0	unsigned int
-		int_ranges	{ size=0 }	std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >
+		[Raw View]	0x00ef2774 {Automizer2.exe!std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > int_ranges} {...}	std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > *
+		ranges	{ size=1405 }	std::vector<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >




